/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BOACoinBridgeInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "balanceOfLiquidity(address)": FunctionFragment;
    "changeTimeLock(uint256)": FunctionFragment;
    "checkDeposit(bytes32)": FunctionFragment;
    "checkSecretKeyDeposit(bytes32)": FunctionFragment;
    "checkSecretKeyWithdraw(bytes32)": FunctionFragment;
    "checkWithdraw(bytes32)": FunctionFragment;
    "closeDeposit(bytes32,bytes)": FunctionFragment;
    "closeWithdraw(bytes32,bytes)": FunctionFragment;
    "decreaseLiquidity(uint256)": FunctionFragment;
    "expireDeposit(bytes32)": FunctionFragment;
    "expireWithdraw(bytes32)": FunctionFragment;
    "getActive()": FunctionFragment;
    "getFeeManager()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseLiquidity()": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "liquidBalance(address)": FunctionFragment;
    "openDeposit(bytes32,uint256,uint256,address,bytes32)": FunctionFragment;
    "openWithdraw(bytes32,uint256,uint256,uint256,address,address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setActive(bool)": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTimeLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSecretKeyDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSecretKeyWithdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWithdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeDeposit",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeWithdraw",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expireWithdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openDeposit",
    values: [BytesLike, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openWithdraw",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setActive", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSecretKeyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSecretKeyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChangeActive(bool)": EventFragment;
    "ChangeFeeManager(address,uint256)": EventFragment;
    "ChangeTimeLock(uint256)": EventFragment;
    "CloseDeposit(bytes32,bytes)": EventFragment;
    "CloseWithdraw(bytes32,bytes)": EventFragment;
    "DecreasedLiquidity(address,uint256)": EventFragment;
    "ExpireDeposit(bytes32)": EventFragment;
    "ExpireWithdraw(bytes32)": EventFragment;
    "IncreasedLiquidity(address,uint256)": EventFragment;
    "OpenDeposit(bytes32,bytes32)": EventFragment;
    "OpenWithdraw(bytes32,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeFeeManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeTimeLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasedLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpireDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpireWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasedLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type ChangeActiveEvent = TypedEvent<[boolean] & { arg0: boolean }>;

export type ChangeFeeManagerEvent = TypedEvent<
  [string, BigNumber] & { newManager: string; liquidBalance: BigNumber }
>;

export type ChangeTimeLockEvent = TypedEvent<
  [BigNumber] & { _timeLock: BigNumber }
>;

export type CloseDepositEvent = TypedEvent<
  [string, string] & { _boxID: string; _secretKey: string }
>;

export type CloseWithdrawEvent = TypedEvent<
  [string, string] & { _boxID: string; _secretKey: string }
>;

export type DecreasedLiquidityEvent = TypedEvent<
  [string, BigNumber] & { provider: string; amount: BigNumber }
>;

export type ExpireDepositEvent = TypedEvent<[string] & { _boxID: string }>;

export type ExpireWithdrawEvent = TypedEvent<[string] & { _boxID: string }>;

export type IncreasedLiquidityEvent = TypedEvent<
  [string, BigNumber] & { provider: string; amount: BigNumber }
>;

export type OpenDepositEvent = TypedEvent<
  [string, string] & { _boxID: string; _secretLock: string }
>;

export type OpenWithdrawEvent = TypedEvent<
  [string, string] & { _boxID: string; _secretLock: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class BOACoinBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BOACoinBridgeInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfLiquidity(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    changeTimeLock(
      _timeLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber
      ] & {
        states: number;
        timeLock: BigNumber;
        amount: BigNumber;
        swapFee: BigNumber;
        txFee: BigNumber;
        traderAddress: string;
        withdrawAddress: string;
        secretLock: string;
        createTimestamp: BigNumber;
      }
    >;

    checkSecretKeyDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { secretKey: string }>;

    checkSecretKeyWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { secretKey: string }>;

    checkWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber
      ] & {
        states: number;
        timeLock: BigNumber;
        amount: BigNumber;
        swapFee: BigNumber;
        txFee: BigNumber;
        traderAddress: string;
        withdrawAddress: string;
        secretLock: string;
        createTimestamp: BigNumber;
      }
    >;

    closeDeposit(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeWithdraw(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireDeposit(
      _boxID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireWithdraw(
      _boxID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActive(
      overrides?: CallOverrides
    ): Promise<[boolean] & { value: boolean }>;

    getFeeManager(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseLiquidity(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isManager(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openDeposit(
      _boxID: BytesLike,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openWithdraw(
      _boxID: BytesLike,
      _amount: BigNumberish,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _traderAddress: string,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActive(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeManager(
      _feeManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  addManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfLiquidity(
    _provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeTimeLock(
    _timeLock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkDeposit(
    _boxID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber
    ] & {
      states: number;
      timeLock: BigNumber;
      amount: BigNumber;
      swapFee: BigNumber;
      txFee: BigNumber;
      traderAddress: string;
      withdrawAddress: string;
      secretLock: string;
      createTimestamp: BigNumber;
    }
  >;

  checkSecretKeyDeposit(
    _boxID: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  checkSecretKeyWithdraw(
    _boxID: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  checkWithdraw(
    _boxID: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber
    ] & {
      states: number;
      timeLock: BigNumber;
      amount: BigNumber;
      swapFee: BigNumber;
      txFee: BigNumber;
      traderAddress: string;
      withdrawAddress: string;
      secretLock: string;
      createTimestamp: BigNumber;
    }
  >;

  closeDeposit(
    _boxID: BytesLike,
    _secretKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeWithdraw(
    _boxID: BytesLike,
    _secretKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireDeposit(
    _boxID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireWithdraw(
    _boxID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActive(overrides?: CallOverrides): Promise<boolean>;

  getFeeManager(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseLiquidity(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isManager(account: string, overrides?: CallOverrides): Promise<boolean>;

  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  liquidBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  openDeposit(
    _boxID: BytesLike,
    _swapFee: BigNumberish,
    _txFee: BigNumberish,
    _withdrawAddress: string,
    _secretLock: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openWithdraw(
    _boxID: BytesLike,
    _amount: BigNumberish,
    _swapFee: BigNumberish,
    _txFee: BigNumberish,
    _traderAddress: string,
    _withdrawAddress: string,
    _secretLock: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActive(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeManager(
    _feeManagerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    addManager(account: string, overrides?: CallOverrides): Promise<void>;

    balanceOfLiquidity(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeTimeLock(
      _timeLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber
      ] & {
        states: number;
        timeLock: BigNumber;
        amount: BigNumber;
        swapFee: BigNumber;
        txFee: BigNumber;
        traderAddress: string;
        withdrawAddress: string;
        secretLock: string;
        createTimestamp: BigNumber;
      }
    >;

    checkSecretKeyDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    checkSecretKeyWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    checkWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber
      ] & {
        states: number;
        timeLock: BigNumber;
        amount: BigNumber;
        swapFee: BigNumber;
        txFee: BigNumber;
        traderAddress: string;
        withdrawAddress: string;
        secretLock: string;
        createTimestamp: BigNumber;
      }
    >;

    closeDeposit(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    closeWithdraw(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    expireDeposit(_boxID: BytesLike, overrides?: CallOverrides): Promise<void>;

    expireWithdraw(_boxID: BytesLike, overrides?: CallOverrides): Promise<void>;

    getActive(overrides?: CallOverrides): Promise<boolean>;

    getFeeManager(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseLiquidity(overrides?: CallOverrides): Promise<void>;

    isManager(account: string, overrides?: CallOverrides): Promise<boolean>;

    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    liquidBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    openDeposit(
      _boxID: BytesLike,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    openWithdraw(
      _boxID: BytesLike,
      _amount: BigNumberish,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _traderAddress: string,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeManager(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setActive(_value: boolean, overrides?: CallOverrides): Promise<void>;

    setFeeManager(
      _feeManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeActive(bool)"(
      undefined?: null
    ): TypedEventFilter<[boolean], { arg0: boolean }>;

    ChangeActive(
      undefined?: null
    ): TypedEventFilter<[boolean], { arg0: boolean }>;

    "ChangeFeeManager(address,uint256)"(
      newManager?: null,
      liquidBalance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { newManager: string; liquidBalance: BigNumber }
    >;

    ChangeFeeManager(
      newManager?: null,
      liquidBalance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { newManager: string; liquidBalance: BigNumber }
    >;

    "ChangeTimeLock(uint256)"(
      _timeLock?: null
    ): TypedEventFilter<[BigNumber], { _timeLock: BigNumber }>;

    ChangeTimeLock(
      _timeLock?: null
    ): TypedEventFilter<[BigNumber], { _timeLock: BigNumber }>;

    "CloseDeposit(bytes32,bytes)"(
      _boxID?: null,
      _secretKey?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretKey: string }
    >;

    CloseDeposit(
      _boxID?: null,
      _secretKey?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretKey: string }
    >;

    "CloseWithdraw(bytes32,bytes)"(
      _boxID?: null,
      _secretKey?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretKey: string }
    >;

    CloseWithdraw(
      _boxID?: null,
      _secretKey?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretKey: string }
    >;

    "DecreasedLiquidity(address,uint256)"(
      provider?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; amount: BigNumber }
    >;

    DecreasedLiquidity(
      provider?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; amount: BigNumber }
    >;

    "ExpireDeposit(bytes32)"(
      _boxID?: null
    ): TypedEventFilter<[string], { _boxID: string }>;

    ExpireDeposit(
      _boxID?: null
    ): TypedEventFilter<[string], { _boxID: string }>;

    "ExpireWithdraw(bytes32)"(
      _boxID?: null
    ): TypedEventFilter<[string], { _boxID: string }>;

    ExpireWithdraw(
      _boxID?: null
    ): TypedEventFilter<[string], { _boxID: string }>;

    "IncreasedLiquidity(address,uint256)"(
      provider?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; amount: BigNumber }
    >;

    IncreasedLiquidity(
      provider?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; amount: BigNumber }
    >;

    "OpenDeposit(bytes32,bytes32)"(
      _boxID?: null,
      _secretLock?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretLock: string }
    >;

    OpenDeposit(
      _boxID?: null,
      _secretLock?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretLock: string }
    >;

    "OpenWithdraw(bytes32,bytes32)"(
      _boxID?: null,
      _secretLock?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretLock: string }
    >;

    OpenWithdraw(
      _boxID?: null,
      _secretLock?: null
    ): TypedEventFilter<
      [string, string],
      { _boxID: string; _secretLock: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfLiquidity(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeTimeLock(
      _timeLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSecretKeyDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSecretKeyWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeDeposit(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeWithdraw(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireDeposit(
      _boxID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireWithdraw(
      _boxID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActive(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    openDeposit(
      _boxID: BytesLike,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openWithdraw(
      _boxID: BytesLike,
      _amount: BigNumberish,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _traderAddress: string,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActive(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeManager(
      _feeManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfLiquidity(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeTimeLock(
      _timeLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSecretKeyDeposit(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSecretKeyWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkWithdraw(
      _boxID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeDeposit(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeWithdraw(
      _boxID: BytesLike,
      _secretKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireDeposit(
      _boxID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireWithdraw(
      _boxID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isManager(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openDeposit(
      _boxID: BytesLike,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openWithdraw(
      _boxID: BytesLike,
      _amount: BigNumberish,
      _swapFee: BigNumberish,
      _txFee: BigNumberish,
      _traderAddress: string,
      _withdrawAddress: string,
      _secretLock: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActive(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      _feeManagerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
